{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e587d2f0-c4b9-4aec-83cf-e39d3fbc2ca2",
   "metadata": {},
   "source": [
    "# Import Library"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "1a400b54-4100-4c6c-b7fd-52802c358fde",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torch.utils.data import TensorDataset, DataLoader\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier, BaggingClassifier, AdaBoostClassifier\n",
    "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, f1_score, precision_score, recall_score\n",
    "from sklearn.pipeline import Pipeline\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.naive_bayes import GaussianNB, MultinomialNB, BernoulliNB\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "import torch.nn.functional as F\n",
    "from sklearn.preprocessing import MinMaxScaler\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7427ae7c-ad82-4161-ad9a-275412113b92",
   "metadata": {},
   "source": [
    "# Load Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ee007469-cb12-4b82-b3ca-ceb310e8c73d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load data\n",
    "data_train_df = pd.read_csv('./data/train.csv')\n",
    "X = data_train_df.loc[:, \"v1\":\"v784\"].to_numpy()\n",
    "y = data_train_df.label.to_numpy()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ed353a3f-7527-4bae-bf61-a2800d2e1d4b",
   "metadata": {},
   "source": [
    "# Data Preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "42faea6d-1180-4737-a9b5-c12433cac03c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch [1/12], Loss: 0.5039, Val Loss: 0.3609\n",
      "Epoch [2/12], Loss: 0.3368, Val Loss: 0.3317\n",
      "Epoch [3/12], Loss: 0.2912, Val Loss: 0.2736\n",
      "Epoch [4/12], Loss: 0.2523, Val Loss: 0.2542\n",
      "Epoch [5/12], Loss: 0.2234, Val Loss: 0.2530\n",
      "Epoch [6/12], Loss: 0.1947, Val Loss: 0.2446\n",
      "Epoch [7/12], Loss: 0.1740, Val Loss: 0.2499\n",
      "Epoch [8/12], Loss: 0.1576, Val Loss: 0.2656\n",
      "Epoch [9/12], Loss: 0.1395, Val Loss: 0.2564\n",
      "Epoch [10/12], Loss: 0.1242, Val Loss: 0.2851\n",
      "Epoch [11/12], Loss: 0.0811, Val Loss: 0.2459\n",
      "Epoch [12/12], Loss: 0.0700, Val Loss: 0.2407\n"
     ]
    }
   ],
   "source": [
    "# Split the data into training and validation sets\n",
    "X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.15, random_state=42)\n",
    "\n",
    "# Normalize the data by scaling pixel values to the range [0, 1] \n",
    "X_train_scaled = X_train / 255.0\n",
    "X_val_scaled = X_val / 255.0\n",
    "\n",
    "# Reshape the data to match the input format of a CNN (batch_size, channels, height, width)\n",
    "# Thhe images are 28x28 grayscale (1 channel)\n",
    "X_train_reshaped = X_train_scaled.reshape(-1, 1, 28, 28)\n",
    "X_val_reshaped = X_val_scaled.reshape(-1, 1, 28, 28)\n",
    "\n",
    "# Convert the numpy arrays into PyTorch tensors\n",
    "X_train_tensor = torch.FloatTensor(X_train_reshaped)\n",
    "y_train_tensor = torch.LongTensor(y_train)\n",
    "X_val_tensor = torch.FloatTensor(X_val_reshaped)\n",
    "y_val_tensor = torch.LongTensor(y_val)\n",
    "\n",
    "# Create a dataset and data loader for the training set\n",
    "# DataLoader allows for batch processing and shuffling of the data\n",
    "train_dataset = TensorDataset(X_train_tensor, y_train_tensor)\n",
    "train_loader = DataLoader(train_dataset, batch_size=64, shuffle=True)\n",
    "\n",
    "# Define the CNN model architecture by subclassing nn.Module\n",
    "class CNN(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(CNN, self).__init__()\n",
    "        \n",
    "        # First convolutional layer with 1 input channel (grayscale image) and 32 output channels\n",
    "        # kernel_size=3 is a 3x3 filter, padding=1 to preserve the image size\n",
    "        self.conv1 = nn.Conv2d(1, 32, kernel_size=3, padding=1)\n",
    "        self.bn1 = nn.BatchNorm2d(32)  # Apply batch normalization \n",
    "        \n",
    "        # Second convolutional layer with 32 input channels and 64 output channels\n",
    "        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, padding=1)\n",
    "        self.bn2 = nn.BatchNorm2d(64)\n",
    "        \n",
    "        # Third convolutional layer with 64 input channels and 128 output channels\n",
    "        self.conv3 = nn.Conv2d(64, 128, kernel_size=3, padding=1)\n",
    "        self.bn3 = nn.BatchNorm2d(128)\n",
    "        \n",
    "        # Max pooling layer to reduce the spatial dimensions by half (2x2 pool size)\n",
    "        self.pool = nn.MaxPool2d(2, 2)\n",
    "        \n",
    "        # Fully connected layer to map from the 128x3x3 feature maps to a 256-dimensional vector\n",
    "        self.fc1 = nn.Linear(128 * 3 * 3, 256)  # 128 channels, each of size 3x3   \n",
    "        self.fc_bn1 = nn.BatchNorm1d(256)  # Apply Batch normalization \n",
    "        \n",
    "        # Second fully connected layer that maps the 256-dimensional vector to 10 output classes\n",
    "        self.fc2 = nn.Linear(256, 10)\n",
    "        \n",
    "        # Dropout layer with a dropout probability of 0.5 to prevent overfitting\n",
    "        self.dropout = nn.Dropout(0.5)\n",
    "\n",
    "    # Forward pass through the network\n",
    "    def forward(self, x):\n",
    "        # Pass through each convolutional layer followed by batch normalization, Leaky ReLU activation, and max pooling\n",
    "        x = self.pool(F.leaky_relu(self.bn1(self.conv1(x))))\n",
    "        x = self.pool(F.leaky_relu(self.bn2(self.conv2(x))))\n",
    "        x = self.pool(F.leaky_relu(self.bn3(self.conv3(x))))\n",
    "        \n",
    "        # Flatten the tensor into a vector before feeding it into the fully connected layers\n",
    "        x = x.view(-1, 128 * 3 * 3)\n",
    "        \n",
    "        # First fully connected layer with Leaky ReLU activation\n",
    "        x = self.fc1(x)\n",
    "        x = self.fc_bn1(x)\n",
    "        x = F.leaky_relu(x)\n",
    "        \n",
    "        # Apply dropout for regularization\n",
    "        x = self.dropout(x)\n",
    "        \n",
    "        # Output layer with log-softmax activation to get log-probabilities for each class\n",
    "        x = self.fc2(x)\n",
    "        x = F.log_softmax(x, dim=1)\n",
    "        return x\n",
    "\n",
    "    # A separate method to extract features from the network (without the final classification layer)\n",
    "    def extract_features(self, x):\n",
    "        x = self.pool(F.leaky_relu(self.bn1(self.conv1(x))))\n",
    "        x = self.pool(F.leaky_relu(self.bn2(self.conv2(x))))\n",
    "        x = self.pool(F.leaky_relu(self.bn3(self.conv3(x))))\n",
    "        x = x.view(-1, 128 * 3 * 3)\n",
    "        x = self.fc1(x)\n",
    "        x = self.fc_bn1(x)\n",
    "        x = F.leaky_relu(x)\n",
    "        return x\n",
    "\n",
    "# Initialize the CNN model\n",
    "model = CNN()\n",
    "\n",
    "# Set the device to GPU if available\n",
    "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "model = model.to(device)\n",
    "\n",
    "# Define the loss function\n",
    "criterion = nn.NLLLoss() # using log_softmax in forward ouput layer, so choose NLLLoss() here\n",
    "\n",
    "# Define the optimizer as SGD with momentum\n",
    "optimizer = optim.SGD(model.parameters(), lr=0.01, momentum=0.9)\n",
    "\n",
    "# Learning rate scheduler to reduce the learning rate by a factor of 0.1 every 10 epochs\n",
    "scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=10, gamma=0.1)\n",
    "\n",
    "# Training the model for 15 epochs\n",
    "num_epochs = 12\n",
    "best_val_loss = float('inf')  # Initialize the best validation loss with infinity\n",
    "\n",
    "for epoch in range(num_epochs):\n",
    "    model.train() \n",
    "    running_loss = 0.0  # Track the running loss for the current epoch\n",
    "    \n",
    "    # Iterate over batches of data from the training set\n",
    "    for batch_X, batch_y in train_loader:\n",
    "        batch_X, batch_y = batch_X.to(device), batch_y.to(device)  # Move data to the appropriate device\n",
    "        optimizer.zero_grad()  # Zero the parameter gradients        \n",
    "        # Forward pass through the model\n",
    "        outputs = model(batch_X)        \n",
    "        # Compute the loss\n",
    "        loss = criterion(outputs, batch_y)        \n",
    "        loss.backward()        \n",
    "        # Perform a single optimization step\n",
    "        optimizer.step()        \n",
    "        # Accumulate the running loss\n",
    "        running_loss += loss.item() * batch_X.size(0)\n",
    "    \n",
    "    # Update the learning rate using the scheduler\n",
    "    scheduler.step()\n",
    "    \n",
    "    # Calculate the average loss for the current epoch\n",
    "    epoch_loss = running_loss / len(train_loader.dataset)\n",
    "\n",
    "    # Switch to evaluation mode for validation\n",
    "    model.eval()\n",
    "    with torch.no_grad():\n",
    "        # Perform validation on the entire validation set\n",
    "        val_outputs = model(X_val_tensor.to(device))\n",
    "        val_loss = criterion(val_outputs, torch.LongTensor(y_val).to(device))\n",
    "    \n",
    "    print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {epoch_loss:.4f}, Val Loss: {val_loss.item():.4f}')\n",
    "\n",
    "# Feature extraction using the trained model\n",
    "model.eval()  # Set the model to evaluation mode\n",
    "with torch.no_grad():\n",
    "    # Extract features from the training and validation sets\n",
    "    X_train_features = model.extract_features(X_train_tensor.to(device)).cpu().numpy()\n",
    "    X_val_features = model.extract_features(X_val_tensor.to(device)).cpu().numpy()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cab442cb-a3ce-4b07-beeb-099eb6166483",
   "metadata": {},
   "source": [
    "# Define Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7aeccd44-a91d-4f04-bb52-2050d2e941ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to create a pipeline with a classifier\n",
    "def create_pipeline(classifier):\n",
    "    return Pipeline([('classifier', classifier)])\n",
    "\n",
    "# Function to create a model, perform grid search, and evaluate it on the validation set\n",
    "def create_and_evaluate_model(classifier, param_grid, X_train, y_train, X_val, y_val):\n",
    "    \n",
    "    # Create a pipeline that includes just the classifier (could be KNN, RandomForest, etc.)\n",
    "    pipeline = Pipeline([('classifier', classifier)])\n",
    "    \n",
    "    # Perform grid search with cross-validation (cv=5) to tune hyperparameters\n",
    "    # param_grid specifies the hyperparameter combinations to test\n",
    "    # scoring='accuracy' evaluates models based on their accuracy\n",
    "    # n_jobs=-1 allows using all available CPU cores for parallel computation\n",
    "    grid_search = GridSearchCV(pipeline, param_grid, cv=5, verbose=2, scoring='accuracy', n_jobs=-1)\n",
    "    \n",
    "    # Fit the grid search model on the training data\n",
    "    grid_search.fit(X_train, y_train)\n",
    "    # Get the best model\n",
    "    best_model = grid_search.best_estimator_    \n",
    "    # Use the best model to make predictions on the validation set\n",
    "    y_pred = best_model.predict(X_val)\n",
    "    accuracy = accuracy_score(y_val, y_pred)\n",
    "\n",
    "    # Return the best model, its accuracy, and the predictions it made\n",
    "    return best_model, accuracy, y_pred"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "178cbb7b-9969-446f-9854-237fc72ecd82",
   "metadata": {},
   "source": [
    "# Model1 - KNN"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e4f3e54d-90db-48da-8836-4ab48d6742b3",
   "metadata": {},
   "source": [
    "#### Implementation\n",
    "Implement the initial version of KNN model using a set of predefined hyperparameters. It establishes a baseline."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "837c8f96-2ccb-457b-bba1-35aabd7a9b0f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "KNN Accuracy: 0.9278\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Use the create_pipeline function to create a pipeline and explicitly pass default hyperparameters\n",
    "knn_pipeline = create_pipeline(KNeighborsClassifier(\n",
    "    n_neighbors=5,         # Number of nearest neighbors\n",
    "    weights='uniform',      # Weighting of neighbors\n",
    "    algorithm='auto',       # Automatically choose the algorithm\n",
    "    leaf_size=30,           # Leaf size for ball_tree or kd_tree\n",
    "    p=2,                    # Distance metric, p=2 is Euclidean distance\n",
    "    metric='minkowski',     # Type of distance metric\n",
    "    n_jobs= -1           \n",
    "))\n",
    "\n",
    "# Fit the model and make predictions\n",
    "knn_pipeline.fit(X_train_features, y_train)\n",
    "knn_pred = knn_pipeline.predict(X_val_features)\n",
    "\n",
    "# Calculate accuracy\n",
    "knn_accuracy = accuracy_score(y_val, knn_pred)\n",
    "print(f\"KNN Accuracy: {knn_accuracy:.4f}\")\n",
    "print()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "10b4e115-c4c7-45ab-ab09-79a339338c38",
   "metadata": {},
   "source": [
    "#### Grid search and Hyper-parameters Tuning\n",
    "Enhance the model by fine-tuning its hyperparameters. Use grid searching combined with k-fold cross-validation to systematically identify the optimal parameter set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "3cc80ef7-3fe8-46e2-9273-32fd5804fd99",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 20 candidates, totalling 100 fits\n",
      "Best KNN Hyperparameters:\n",
      "algorithm: auto\n",
      "leaf_size: 30\n",
      "metric: minkowski\n",
      "metric_params: None\n",
      "n_jobs: -1\n",
      "n_neighbors: 12\n",
      "p: 2\n",
      "weights: distance\n",
      "KNN Accuracy after Grid Search: 0.9282\n"
     ]
    }
   ],
   "source": [
    "# KNN Grid Search\n",
    "# Define the hyperparameter grid for KNN\n",
    "param_grid = {\n",
    "    'classifier__n_neighbors': [3, 5, 7, 9, 12],\n",
    "    'classifier__weights': ['uniform', 'distance'],\n",
    "    'classifier__p': [1, 2],  \n",
    "    'classifier__n_jobs':[-1] # speed up the search process\n",
    "}\n",
    "\n",
    "# Perform grid search and evaluation using the function\n",
    "best_knn_model, knn_accuracy, knn_pred = create_and_evaluate_model(\n",
    "    KNeighborsClassifier(),\n",
    "    param_grid,\n",
    "    X_train_features,\n",
    "    y_train,\n",
    "    X_val_features,\n",
    "    y_val\n",
    ")\n",
    "\n",
    "# Output the best hyperparameters\n",
    "best_params = best_knn_model.get_params()['classifier']\n",
    "print(\"Best KNN Hyperparameters:\")\n",
    "for param, value in best_params.get_params().items():\n",
    "    print(f\"{param}: {value}\")\n",
    "\n",
    "# Output the accuracy after grid search\n",
    "print(f\"KNN Accuracy after Grid Search: {knn_accuracy:.4f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "11babda6-211b-4520-8ba6-a5a690879dbb",
   "metadata": {},
   "source": [
    "# Model2 - Naive Bayes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b65896d6-8ba8-4a01-b36f-02b01ede7f16",
   "metadata": {},
   "source": [
    "#### Implementation\n",
    "Implement the initial version of Naive Bayes model using a set of predefined hyperparameters. It establishes a baseline."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3b470eb4-8751-407e-9698-9514463e7210",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Naive Bayes Accuracy: 0.9218\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# GaussianNB\n",
    "nb_pipeline = create_pipeline(GaussianNB(var_smoothing=1e-9))  # Default value of var_smoothing\n",
    "\n",
    "# Fit the model and make predictions\n",
    "nb_pipeline.fit(X_train_features, y_train)\n",
    "nb_pred = nb_pipeline.predict(X_val_features)\n",
    "\n",
    "# Calculate accuracy\n",
    "nb_accuracy = accuracy_score(y_val, nb_pred)\n",
    "print(f\"Naive Bayes Accuracy: {nb_accuracy:.4f}\")\n",
    "print()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2bba7254-6a85-4f48-876f-ec9402bf3469",
   "metadata": {},
   "source": [
    "#### Grid search and Hyper-parameters Tuning\n",
    "Enhance the model by fine-tuning its hyperparameters. Use grid searching combined with k-fold cross-validation to systematically identify the optimal parameter set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "4ac5f2d9-36ef-4a09-ab15-5ea6b709474f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 10 candidates, totalling 50 fits\n",
      "Best GaussianNB Hyperparameters:\n",
      "classifier__var_smoothing: 0.01\n",
      "GaussianNB Accuracy after Grid Search: 0.9220\n",
      "Fitting 5 folds for each of 40 candidates, totalling 200 fits\n",
      "Best BernoulliNB Hyperparameters:\n",
      "classifier__alpha: 0.001\n",
      "classifier__fit_prior: True\n",
      "classifier__binarize: 0.5\n",
      "BernoulliNB Accuracy after Grid Search: 0.9242\n",
      "Fitting 5 folds for each of 10 candidates, totalling 50 fits\n",
      "Best MultinomialNB Hyperparameters:\n",
      "classifier__alpha: 0.001\n",
      "classifier__fit_prior: False\n",
      "MultinomialNB Accuracy after Grid Search: 0.9222\n"
     ]
    }
   ],
   "source": [
    "# Three types of Naive Bayes Grid Search\n",
    "\n",
    "# GaussianNB\n",
    "# Define the hyperparameter grid for GaussianNB\n",
    "param_grid_gnb = {\n",
    "    'classifier__var_smoothing': np.logspace(-9, 0, 10)  # Smoothing parameter search space\n",
    "}\n",
    "\n",
    "# Initialize Gaussian Naive Bayes classifier\n",
    "gnb_classifier = GaussianNB()\n",
    "\n",
    "# Perform grid search and evaluation for GaussianNB\n",
    "best_gnb_model, gnb_accuracy, gnb_pred = create_and_evaluate_model(\n",
    "    gnb_classifier,\n",
    "    param_grid_gnb,\n",
    "    X_train_features,\n",
    "    y_train,\n",
    "    X_val_features,\n",
    "    y_val\n",
    ")\n",
    "\n",
    "# Output best hyperparameters for GaussianNB (only the searched ones)\n",
    "print(\"Best GaussianNB Hyperparameters:\")\n",
    "for param in param_grid_gnb:\n",
    "    print(f\"{param}: {best_gnb_model.get_params()[param]}\")\n",
    "\n",
    "print(f\"GaussianNB Accuracy after Grid Search: {gnb_accuracy:.4f}\")\n",
    "\n",
    "# BernoulliNB\n",
    "# Define the hyperparameter grid for BernoulliNB\n",
    "param_grid_bnb = {\n",
    "    'classifier__alpha': np.logspace(-3, 1, 5),  # Smoothing parameter for BernoulliNB\n",
    "    'classifier__fit_prior': [True, False],      # Whether to learn class prior probabilities\n",
    "    'classifier__binarize': [None, 0.0, 0.5, 1.0]  # Threshold for binarizing data\n",
    "}\n",
    "\n",
    "# Initialize Bernoulli Naive Bayes classifier\n",
    "bnb_classifier = BernoulliNB()\n",
    "\n",
    "# Perform grid search and evaluation for BernoulliNB\n",
    "best_bnb_model, bnb_accuracy, bnb_pred = create_and_evaluate_model(\n",
    "    bnb_classifier,\n",
    "    param_grid_bnb,\n",
    "    X_train_features,\n",
    "    y_train,\n",
    "    X_val_features,\n",
    "    y_val\n",
    ")\n",
    "\n",
    "# Output best hyperparameters for BernoulliNB (only the searched ones)\n",
    "print(\"Best BernoulliNB Hyperparameters:\")\n",
    "for param in param_grid_bnb:\n",
    "    print(f\"{param}: {best_bnb_model.get_params()[param]}\")\n",
    "\n",
    "print(f\"BernoulliNB Accuracy after Grid Search: {bnb_accuracy:.4f}\")\n",
    "\n",
    "# MultinomialNB\n",
    "# MinMaxScaler to ensure non-negative values for MultinomialNB\n",
    "scaler = MinMaxScaler()\n",
    "X_train_non_negative = scaler.fit_transform(X_train_features)\n",
    "X_val_non_negative = scaler.transform(X_val_features)\n",
    "\n",
    "# Define the hyperparameter grid for MultinomialNB\n",
    "param_grid_mnb = {\n",
    "    'classifier__alpha': np.logspace(-3, 1, 5),  # Smoothing parameter for MultinomialNB\n",
    "    'classifier__fit_prior': [True, False]       # Whether to learn class prior probabilities\n",
    "}\n",
    "\n",
    "# Initialize Multinomial Naive Bayes classifier\n",
    "mnb_classifier = MultinomialNB()\n",
    "\n",
    "# Perform grid search and evaluation for MultinomialNB\n",
    "best_mnb_model, mnb_accuracy, mnb_pred = create_and_evaluate_model(\n",
    "    mnb_classifier,\n",
    "    param_grid_mnb,\n",
    "    X_train_non_negative,\n",
    "    y_train,\n",
    "    X_val_non_negative,\n",
    "    y_val\n",
    ")\n",
    "\n",
    "# Output best hyperparameters for MultinomialNB (only the searched ones)\n",
    "print(\"Best MultinomialNB Hyperparameters:\")\n",
    "for param in param_grid_mnb:\n",
    "    print(f\"{param}: {best_mnb_model.get_params()[param]}\")\n",
    "\n",
    "print(f\"MultinomialNB Accuracy after Grid Search: {mnb_accuracy:.4f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "062c8857-b36c-4134-8549-4079c042ed2a",
   "metadata": {},
   "source": [
    "# Model3 - SVM"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "956df469-a088-4ac3-b8b1-c09adbb76e25",
   "metadata": {},
   "source": [
    "#### Implementation\n",
    "Implement the initial version of SCM model using a set of predefined hyperparameters. It establishes a baseline."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "d0be6b5e-9f81-4b77-82b1-2b66404306c8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SVM Accuracy: 0.9184\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# SVM with default parameters\n",
    "svm_pipeline = create_pipeline(SVC(\n",
    "    C=0.1,                   # Regularization parameter\n",
    "    kernel='linear',             # Kernel type used in the algorithm\n",
    "    gamma='scale',            # Kernel coefficient for 'rbf', 'poly' and 'sigmoid'\n",
    "    decision_function_shape='ovr',  # One-vs-rest ('ovr') decision function\n",
    "))\n",
    "\n",
    "# Fit the model and make predictions\n",
    "svm_pipeline.fit(X_train_features, y_train)\n",
    "svm_pred = svm_pipeline.predict(X_val_features)\n",
    "\n",
    "# Calculate accuracy\n",
    "svm_accuracy = accuracy_score(y_val, svm_pred)\n",
    "print(f\"SVM Accuracy: {svm_accuracy:.4f}\")\n",
    "print()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9484b782-64b8-4513-927c-5940058cdf13",
   "metadata": {},
   "source": [
    "#### Grid search and Hyper-parameters Tuning\n",
    "Enhance the model by fine-tuning its hyperparameters. Use grid searching combined with k-fold cross-validation to systematically identify the optimal parameter set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "4fa0b58e-8d7c-4227-a4b1-bd5cd0e113e7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 36 candidates, totalling 180 fits\n",
      "Best SVM Hyperparameters:\n",
      "classifier__kernel: rbf\n",
      "classifier__C: 1\n",
      "classifier__gamma: scale\n",
      "classifier__degree: 3\n",
      "SVM Accuracy after Grid Search: 0.9227\n"
     ]
    }
   ],
   "source": [
    "# SVM Grid Search (Standardized Parameters)\n",
    "# Standardize the features\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train_features)\n",
    "X_val_scaled = scaler.transform(X_val_features)\n",
    "\n",
    "# Define the hyperparameter grid for SVM\n",
    "param_grid_svm = [\n",
    "    {\n",
    "        'classifier__kernel': ['linear'],\n",
    "        'classifier__C': [0.1, 1, 10, 100]\n",
    "    },\n",
    "    {\n",
    "        'classifier__kernel': ['rbf'],\n",
    "        'classifier__C': [0.1, 1, 10, 100],\n",
    "        'classifier__gamma': ['scale', 'auto']\n",
    "    },\n",
    "    {\n",
    "        'classifier__C': [0.1, 1, 10, 100],\n",
    "        'classifier__kernel': ['poly'],\n",
    "        'classifier__gamma': ['scale', 'auto'],\n",
    "        'classifier__degree': [2, 3, 4]\n",
    "    }\n",
    "]\n",
    "\n",
    "# Create the SVM classifier\n",
    "svm_classifier = SVC()\n",
    "\n",
    "# Perform grid search and evaluation using the function\n",
    "best_svm_model, svm_accuracy, svm_pred = create_and_evaluate_model(\n",
    "    svm_classifier,\n",
    "    param_grid_svm,\n",
    "    X_train_scaled,\n",
    "    y_train,\n",
    "    X_val_scaled,\n",
    "    y_val\n",
    ")\n",
    "\n",
    "# Create a set to store the unique searched hyperparameters\n",
    "searched_params = set()\n",
    "\n",
    "# Get the best hyperparameters \n",
    "print(\"Best SVM Hyperparameters:\")\n",
    "for grid in param_grid_svm:\n",
    "    for param in grid:\n",
    "        if param not in searched_params:\n",
    "            searched_params.add(param)\n",
    "            print(f\"{param}: {best_svm_model.get_params()[param]}\")\n",
    "\n",
    "print(f\"SVM Accuracy after Grid Search: {svm_accuracy:.4f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62e65a8a-bc19-4de7-b019-b7fa0859336d",
   "metadata": {},
   "source": [
    "# Model4 - Random Forest"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e39c27f-2f91-4c54-a39d-9ec55f34c0dc",
   "metadata": {},
   "source": [
    "#### Implementation\n",
    "Implement the initial version of Radom Forest model using a set of predefined hyperparameters. It establishes a baseline."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "8798b363-d276-4d50-bd67-263df1b7b80f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random Forest Accuracy: 0.9242\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Random Forest default parameters\n",
    "rf_pipeline = create_pipeline(RandomForestClassifier(\n",
    "    n_estimators=100,            # Number of trees in the forest\n",
    "    max_depth=None,              # Maximum depth of the tree (None means unlimited depth)\n",
    "    min_samples_split=2,         # Minimum number of samples required to split an internal node\n",
    "    min_samples_leaf=1,          # Minimum number of samples required to be at a leaf node\n",
    "    bootstrap=True,              # Whether bootstrap samples are used when building trees\n",
    "    n_jobs=-1,                 \n",
    "))\n",
    "\n",
    "# Fit the model and make predictions\n",
    "rf_pipeline.fit(X_train_features, y_train)\n",
    "rf_pred = rf_pipeline.predict(X_val_features)\n",
    "\n",
    "# Calculate accuracy\n",
    "rf_accuracy = accuracy_score(y_val, rf_pred)\n",
    "print(f\"Random Forest Accuracy: {rf_accuracy:.4f}\")\n",
    "print()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3fa4d14b-c001-4990-9024-b15b2e238ed9",
   "metadata": {},
   "source": [
    "#### Grid search and Hyper-parameters Tuning\n",
    "Enhance the model by fine-tuning its hyperparameters. Use grid searching combined with k-fold cross-validation to systematically identify the optimal parameter set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "f04280bb-3a89-442e-af7d-148db942197d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 216 candidates, totalling 1080 fits\n",
      "Best Random Forest Hyperparameters:\n",
      "classifier__n_estimators: 200\n",
      "classifier__max_depth: 20\n",
      "classifier__min_samples_split: 5\n",
      "classifier__min_samples_leaf: 2\n",
      "classifier__bootstrap: False\n",
      "Random Forest Accuracy after Grid Search: 0.9251\n"
     ]
    }
   ],
   "source": [
    "# Random Forest Grid Search\n",
    "# Define the hyperparameter grid for Random Forest\n",
    "param_grid_rf = {\n",
    "    'classifier__n_estimators': [100, 200, 300],    # Number of trees\n",
    "    'classifier__max_depth': [None, 10, 20, 30],    # Maximum depth of the tree\n",
    "    'classifier__min_samples_split': [2, 5, 10],    # Minimum number of samples required to split an internal node\n",
    "    'classifier__min_samples_leaf': [1, 2, 4],      # Minimum number of samples required at a leaf node\n",
    "    'classifier__bootstrap': [True, False]          # Whether to use bootstrap samples\n",
    "}\n",
    "\n",
    "# Create the Random Forest classifier\n",
    "rf_classifier = RandomForestClassifier()\n",
    "\n",
    "# Perform grid search and evaluation using the existing function\n",
    "best_rf_model, rf_accuracy, rf_pred = create_and_evaluate_model(\n",
    "    rf_classifier,\n",
    "    param_grid_rf,\n",
    "    X_train_features,\n",
    "    y_train,\n",
    "    X_val_features,\n",
    "    y_val\n",
    ")\n",
    "\n",
    "# Output best hyperparameters for Random Forest (only the searched ones)\n",
    "print(\"Best Random Forest Hyperparameters:\")\n",
    "for param in param_grid_rf:\n",
    "    print(f\"{param}: {best_rf_model.named_steps['classifier'].get_params()[param.split('__')[1]]}\")\n",
    "\n",
    "# Output the Random Forest model's accuracy after grid search\n",
    "print(f\"Random Forest Accuracy after Grid Search: {rf_accuracy:.4f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a45a729-b436-4024-b3a5-12603627579e",
   "metadata": {},
   "source": [
    "# Evaluation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b65b35b-5862-4fe7-832b-b96c6ba35b70",
   "metadata": {},
   "source": [
    "Evaluate the best version of each model using appropriate classification performance metrics on the validation set and test on test1.csv. Visualize the by using plots and figures to clearly model performance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "f1cd31a2-ed10-4ba7-9b76-bcf12b992b7c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "KNN Confusion Matrix:\n",
      "[[394   1   7   9   3   0  46   0   1   0]\n",
      " [  0 454   0   5   0   0   1   0   1   0]\n",
      " [  8   0 373   3  21   0  23   0   1   0]\n",
      " [  8   1   3 414  12   0   9   0   0   0]\n",
      " [  0   0  15   4 386   0  18   0   0   0]\n",
      " [  0   0   0   0   0 472   0   6   0   4]\n",
      " [ 40   0  25   6  19   0 344   0   1   0]\n",
      " [  0   0   0   0   0   0   0 447   0   6]\n",
      " [  1   0   1   2   0   0   1   2 465   0]\n",
      " [  0   0   0   0   0   2   0   7   0 428]]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "KNN Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.85      0.86       461\n",
      "           1       1.00      0.98      0.99       461\n",
      "           2       0.88      0.87      0.87       429\n",
      "           3       0.93      0.93      0.93       447\n",
      "           4       0.88      0.91      0.89       423\n",
      "           5       1.00      0.98      0.99       482\n",
      "           6       0.78      0.79      0.78       435\n",
      "           7       0.97      0.99      0.98       453\n",
      "           8       0.99      0.99      0.99       472\n",
      "           9       0.98      0.98      0.98       437\n",
      "\n",
      "    accuracy                           0.93      4500\n",
      "   macro avg       0.93      0.93      0.93      4500\n",
      "weighted avg       0.93      0.93      0.93      4500\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# print Confusion Matrix for KNN with best parameters\n",
    "knn_conf_matrix = confusion_matrix(y_val, knn_pred)\n",
    "\n",
    "print(\"KNN Confusion Matrix:\")\n",
    "print(knn_conf_matrix)\n",
    "\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.heatmap(knn_conf_matrix, annot=True, fmt='d', cmap='Blues')\n",
    "plt.title('KNN Confusion Matrix')\n",
    "plt.xlabel('Predicted Labels')\n",
    "plt.ylabel('True Labels')\n",
    "plt.show()\n",
    "\n",
    "# print classification_report \n",
    "knn_classification_report = classification_report(y_val, knn_pred)\n",
    "\n",
    "print(\"KNN Classification Report:\")\n",
    "print(knn_classification_report)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "5449fce2-4b50-444b-a6f7-a30364865e0f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Naive Bayes Confusion Matrix:\n",
      "[[403   0   5  12   4   0  35   0   2   0]\n",
      " [  2 447   2   7   2   0   0   0   1   0]\n",
      " [  9   0 371   4  23   0  19   0   3   0]\n",
      " [  6   0   3 416  10   0  11   0   1   0]\n",
      " [  0   0  15  10 379   0  18   0   1   0]\n",
      " [  0   0   0   0   0 474   0   5   0   3]\n",
      " [ 50   0  26   7  19   0 332   0   1   0]\n",
      " [  0   0   0   0   0   1   0 446   1   5]\n",
      " [  1   0   0   2   1   0   2   2 464   0]\n",
      " [  0   0   0   0   0   2   0   8   0 427]]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Naive Bayes Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.86      0.87      0.86       461\n",
      "           1       1.00      0.97      0.98       461\n",
      "           2       0.88      0.86      0.87       429\n",
      "           3       0.91      0.93      0.92       447\n",
      "           4       0.87      0.90      0.88       423\n",
      "           5       0.99      0.98      0.99       482\n",
      "           6       0.80      0.76      0.78       435\n",
      "           7       0.97      0.98      0.98       453\n",
      "           8       0.98      0.98      0.98       472\n",
      "           9       0.98      0.98      0.98       437\n",
      "\n",
      "    accuracy                           0.92      4500\n",
      "   macro avg       0.92      0.92      0.92      4500\n",
      "weighted avg       0.92      0.92      0.92      4500\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# print Confusion Matrix for Naive Bayes with best parameters\n",
    "bnb_conf_matrix = confusion_matrix(y_val, bnb_pred)\n",
    "\n",
    "print(\"Naive Bayes Confusion Matrix:\")\n",
    "print(bnb_conf_matrix)\n",
    "\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.heatmap(bnb_conf_matrix, annot=True, fmt='d', cmap='Blues')\n",
    "plt.title('Naive Bayes Confusion Matrix')\n",
    "plt.xlabel('Predicted Labels')\n",
    "plt.ylabel('True Labels')\n",
    "plt.show()\n",
    "\n",
    "# print classification_report \n",
    "bnb_classification_report = classification_report(y_val, bnb_pred)\n",
    "\n",
    "print(\"Naive Bayes Classification Report:\")\n",
    "print(bnb_classification_report)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "13bd2d97-cd48-452c-8c79-954275cc687d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SVM Confusion Matrix:\n",
      "[[387   0   8  10   4   0  50   0   2   0]\n",
      " [  1 451   1   6   1   0   0   0   1   0]\n",
      " [ 13   0 370   2  19   0  24   0   1   0]\n",
      " [ 11   3   4 407  14   0   7   0   1   0]\n",
      " [  0   0  26  10 369   0  18   0   0   0]\n",
      " [  0   0   0   0   0 474   0   4   0   4]\n",
      " [ 43   0  28   5  19   0 337   0   3   0]\n",
      " [  0   0   0   0   0   0   0 445   2   6]\n",
      " [  2   0   0   1   0   0   1   2 466   0]\n",
      " [  0   0   0   0   0   2   0   8   0 427]]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SVM Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.85      0.84      0.84       461\n",
      "           1       0.99      0.98      0.99       461\n",
      "           2       0.85      0.86      0.85       429\n",
      "           3       0.92      0.91      0.92       447\n",
      "           4       0.87      0.87      0.87       423\n",
      "           5       1.00      0.98      0.99       482\n",
      "           6       0.77      0.77      0.77       435\n",
      "           7       0.97      0.98      0.98       453\n",
      "           8       0.98      0.99      0.98       472\n",
      "           9       0.98      0.98      0.98       437\n",
      "\n",
      "    accuracy                           0.92      4500\n",
      "   macro avg       0.92      0.92      0.92      4500\n",
      "weighted avg       0.92      0.92      0.92      4500\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# print Confusion Matrix for SVM with best parameters\n",
    "svm_conf_matrix = confusion_matrix(y_val, svm_pred)\n",
    "\n",
    "print(\"SVM Confusion Matrix:\")\n",
    "print(svm_conf_matrix)\n",
    "\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.heatmap(svm_conf_matrix, annot=True, fmt='d', cmap='Blues')\n",
    "plt.title('SVM Confusion Matrix')\n",
    "plt.xlabel('Predicted Labels')\n",
    "plt.ylabel('True Labels')\n",
    "plt.show()\n",
    "\n",
    "# print classification_report \n",
    "svm_classification_report = classification_report(y_val, svm_pred)\n",
    "\n",
    "print(\"SVM Classification Report:\")\n",
    "print(svm_classification_report)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "a665eef9-5fca-4935-95cf-60f0ff9bc2c5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random Forest Confusion Matrix:\n",
      "[[393   0   5   9   4   0  48   0   2   0]\n",
      " [  1 450   0   7   1   0   1   0   1   0]\n",
      " [  7   0 374   4  20   0  21   0   3   0]\n",
      " [  8   1   3 412  12   0  11   0   0   0]\n",
      " [  0   0  15   9 378   0  21   0   0   0]\n",
      " [  0   0   0   0   0 474   0   5   0   3]\n",
      " [ 41   0  25   7  18   0 343   0   1   0]\n",
      " [  0   0   0   0   0   1   0 446   1   5]\n",
      " [  1   0   0   2   1   0   2   2 463   1]\n",
      " [  0   0   0   0   0   2   0   5   0 430]]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random Forest Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.85      0.86       461\n",
      "           1       1.00      0.98      0.99       461\n",
      "           2       0.89      0.87      0.88       429\n",
      "           3       0.92      0.92      0.92       447\n",
      "           4       0.87      0.89      0.88       423\n",
      "           5       0.99      0.98      0.99       482\n",
      "           6       0.77      0.79      0.78       435\n",
      "           7       0.97      0.98      0.98       453\n",
      "           8       0.98      0.98      0.98       472\n",
      "           9       0.98      0.98      0.98       437\n",
      "\n",
      "    accuracy                           0.93      4500\n",
      "   macro avg       0.92      0.92      0.92      4500\n",
      "weighted avg       0.93      0.93      0.93      4500\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# print Confusion Matrix for Random Forest with best parameters\n",
    "rf_conf_matrix = confusion_matrix(y_val, rf_pred)\n",
    "\n",
    "print(\"Random Forest Confusion Matrix:\")\n",
    "print(rf_conf_matrix)\n",
    "\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.heatmap(rf_conf_matrix, annot=True, fmt='d', cmap='Blues')\n",
    "plt.title('Random Forest Confusion Matrix')\n",
    "plt.xlabel('Predicted Labels')\n",
    "plt.ylabel('True Labels')\n",
    "plt.show()\n",
    "\n",
    "# print classification_report \n",
    "rf_classification_report = classification_report(y_val, rf_pred)\n",
    "\n",
    "print(\"Random Forest Classification Report:\")\n",
    "print(rf_classification_report)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6043d636-a5d6-4409-b9ae-3173549e4b52",
   "metadata": {},
   "source": [
    "# Comparison"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fc2a293e-b099-4bd0-a5de-4ce18e31129a",
   "metadata": {},
   "source": [
    "Compare all classifiers with their optimized hyper-parameters, focusing on criteria such as classification performance, training time, and inference time. Visualization of these comparisons is required; use high-quality plots, figures, or tables to facilitate a clear understanding of the differences and strengths of each model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "19997445-cb15-4b68-9927-bbdea526ab93",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a dictionary to store all models and their predictions\n",
    "models = {\n",
    "    'KNN': (best_knn_model, knn_pred),\n",
    "    'Naive Bayes': (best_gnb_model, gnb_pred),  # Using the best-performing Naive Bayes model\n",
    "    'SVM': (best_svm_model, svm_pred),\n",
    "    'Random Forest': (best_rf_model, rf_pred)\n",
    "}\n",
    "\n",
    "# Calculate performance metrics for each model\n",
    "metrics = {\n",
    "    'Accuracy': accuracy_score,\n",
    "    'F1 Score': lambda y_true, y_pred: f1_score(y_true, y_pred, average='weighted'),\n",
    "    'Precision': lambda y_true, y_pred: precision_score(y_true, y_pred, average='weighted'),\n",
    "    'Recall': lambda y_true, y_pred: recall_score(y_true, y_pred, average='weighted')\n",
    "}\n",
    "\n",
    "# Store the performance results for each model\n",
    "results = {model: {metric: func(y_val, pred) for metric, func in metrics.items()} \n",
    "           for model, (_, pred) in models.items()}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "9767a086-2ef3-48ce-90be-94b2a5516bbc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Model Performance Comparison:\n",
      "               Accuracy  F1 Score  Precision    Recall\n",
      "KNN            0.928222  0.928356   0.928645  0.928222\n",
      "Naive Bayes    0.922000  0.921855   0.921886  0.922000\n",
      "SVM            0.918444  0.918548   0.918712  0.918444\n",
      "Random Forest  0.925111  0.925324   0.925663  0.925111\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Best Model (based on Accuracy): KNN\n",
      "Best Model Accuracy: 0.9282\n"
     ]
    }
   ],
   "source": [
    "# Create a comparison table\n",
    "comparison_df = pd.DataFrame(results).T\n",
    "print(\"\\nModel Performance Comparison:\")\n",
    "print(comparison_df)\n",
    "\n",
    "# Visualize the comparison\n",
    "plt.figure(figsize=(12, 6))\n",
    "ax = plt.gca()\n",
    "comparison_df.plot(kind='bar', ax=ax)\n",
    "ax.set_ylim(0.9, 0.95)\n",
    "plt.title('Model Performance Comparison')\n",
    "plt.xlabel('Models')\n",
    "plt.ylabel('Score')\n",
    "plt.legend(title='Metrics', bbox_to_anchor=(1.05, 1), loc='upper left')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# Find the best-performing model (based on accuracy)\n",
    "best_model_name = max(results, key=lambda x: results[x]['Accuracy'])\n",
    "print(f\"\\nBest Model (based on Accuracy): {best_model_name}\")\n",
    "print(f\"Best Model Accuracy: {results[best_model_name]['Accuracy']:.4f}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be267b9e-a89d-4ccb-bdad-d01c6ef7b674",
   "metadata": {},
   "source": [
    "# The Best Classifier"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d30baf69-0d90-48aa-b25f-32652b681939",
   "metadata": {},
   "source": [
    "The best classifier is KNN using the best parameters."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c79427c-92f5-4bd3-98a6-d49bfa75b825",
   "metadata": {},
   "source": [
    "# Loading testing data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a006af0-52d5-4ded-be7b-c5c09927bddd",
   "metadata": {},
   "source": [
    "Load the testing data for prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "4a07c790-8a09-4b9f-9684-aaf8a0b3d9d4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>v1</th>\n",
       "      <th>v2</th>\n",
       "      <th>v3</th>\n",
       "      <th>v4</th>\n",
       "      <th>v5</th>\n",
       "      <th>v6</th>\n",
       "      <th>v7</th>\n",
       "      <th>v8</th>\n",
       "      <th>v9</th>\n",
       "      <th>v10</th>\n",
       "      <th>...</th>\n",
       "      <th>v776</th>\n",
       "      <th>v777</th>\n",
       "      <th>v778</th>\n",
       "      <th>v779</th>\n",
       "      <th>v780</th>\n",
       "      <th>v781</th>\n",
       "      <th>v782</th>\n",
       "      <th>v783</th>\n",
       "      <th>v784</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>58</td>\n",
       "      <td>...</td>\n",
       "      <td>155</td>\n",
       "      <td>143</td>\n",
       "      <td>69</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 785 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    v1  v2  v3  v4  v5  v6  v7  v8  v9  v10  ...  v776  v777  v778  v779  \\\n",
       "id                                           ...                           \n",
       "1    0   0   0   0   0   0   0   0   0    0  ...     0     0     0     0   \n",
       "2    0   0   0   0   0   0   0   0   0    0  ...     0     0     0     0   \n",
       "3    0   0   0   0   0   0   0   0   0   40  ...     0     0     0     0   \n",
       "4    0   0   1   0   2   0   0   0   0   58  ...   155   143    69     0   \n",
       "5    0   0   0   0   0   0   0   0   0    0  ...     0     0     0     0   \n",
       "\n",
       "    v780  v781  v782  v783  v784  label  \n",
       "id                                       \n",
       "1      0     0     0     0     0      3  \n",
       "2      0     0     0     0     0      7  \n",
       "3      0     0     0     0     0      3  \n",
       "4      0     0     0     0     0      0  \n",
       "5      0     0     0     0     0      9  \n",
       "\n",
       "[5 rows x 785 columns]"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# test2.csv includes 5000 samples used for label prediction. Test samples do not have labels.\n",
    "data_test_df = pd.read_csv('./data/test1.csv', index_col=0)\n",
    "# print out the first 5 rows of the test dataframe\n",
    "data_test_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "72a86670-8fc7-4879-9336-a4f14522964a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predictions saved to test_output.csv\n"
     ]
    }
   ],
   "source": [
    "# Get the actual best model object\n",
    "best_model = models[best_model_name][0]\n",
    "# Predict on test data\n",
    "data_test_df = pd.read_csv('./data/test1.csv')\n",
    "X_test = data_test_df.loc[:, \"v1\":\"v784\"].to_numpy()\n",
    "X_test_scaled = X_test/255.0\n",
    "X_test_reshaped = X_test_scaled.reshape(-1, 1, 28, 28)\n",
    "X_test_tensor = torch.FloatTensor(X_test_reshaped)\n",
    "\n",
    "with torch.no_grad():\n",
    "    X_test_features = model.extract_features(X_test_tensor.to(device)).cpu().numpy()\n",
    "\n",
    "predictions = best_model.predict(X_test_features)\n",
    "\n",
    "# Save predictions\n",
    "output_df = pd.DataFrame(predictions, columns=['label'])\n",
    "\n",
    "output_df.to_csv('./test_output.csv', sep=\",\", float_format='%d', index_label=\"id\")\n",
    "print(\"Predictions saved to test_output.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "632bff7a-d805-418b-a40d-80c2517e981b",
   "metadata": {},
   "source": [
    "Save prediction vector as a `test_output.csv` file, which contains two columns: `id` and `label`. Please refer to the `example_output.csv` for the structure of this output file."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
